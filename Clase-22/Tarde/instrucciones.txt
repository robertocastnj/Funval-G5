/* -------------------------------------------------------------------- */
/* /*****************************************************
 üìù Ejercicio Grupal: Simulador de Procesos de un Restaurante
 ‚è∞ Duraci√≥n estimada: 1 hora y 30 minutos
 üë• Trabajo en grupos de 3 a 5 personas
******************************************************/

/*
üéØ OBJETIVO:
Implementar un sistema que simule el flujo de atenci√≥n en un restaurante
utilizando callbacks, promesas y async/await.
*/

/*
üìå INSTRUCCIONES:

1. Callback (Pedido del cliente):
   - Crear una funci√≥n que simule que un cliente llega y hace un pedido.
   - El pedido debe recibirse mediante una funci√≥n con callback.
   - El callback debe mostrar en consola el pedido realizado por el cliente.

   Ejemplo esperado en consola:
   Cliente lleg√≥ y pidi√≥: Pizza
   Pedido recibido: Pizza
*/

/*
2. Promesas (Cocina):
   - Una vez recibido el pedido, pasa a cocina.
   - La cocina debe simular el tiempo de preparaci√≥n de cada comida
     usando setTimeout y promesas.
   - Los tiempos de cocci√≥n son:
       Pizza: 3 segundos
       Hamburguesa: 2 segundos
       Ensalada: 1 segundo

   Ejemplo esperado en consola:
   Cocinando Pizza...
   Pizza lista en 3 segundos
*/

/*
3. Async/Await (Servicio y Pago):
   - Despu√©s de que la promesa de la cocina se resuelva, el pedido debe ser
     servido al cliente.
   - Simular que el cliente come durante 2 segundos y luego paga la cuenta.
   - Esto debe hacerse usando async/await.

   Ejemplo esperado en consola:
   Sirviendo Pizza al cliente...
   Cliente est√° comiendo...
   Cuenta pagada ‚úÖ
*/

/*
4. Desaf√≠o Extra (Opcional):
   - Manejar varios clientes que hagan pedidos en paralelo usando Promise.all.
   - Mostrar en consola cu√°l pedido estuvo listo primero.
*/

/*
üîß ESPECIFICACIONES T√âCNICAS:
- Usar JavaScript en un archivo main.js.
- Pueden usar la consola del navegador o Node.js para probar el c√≥digo.
- El flujo debe contener las tres etapas:
     ‚úÖ Pedido con callback.
     ‚úÖ Cocina con promesas.
     ‚úÖ Servicio y pago con async/await.
- El c√≥digo debe estar modularizado en funciones para cada proceso.
*/

/*
 RESULTADO ESPERADO (ejemplo de flujo completo):
Cliente lleg√≥ y pidi√≥: Pizza
Pedido recibido: Pizza
Cocinando Pizza...
Pizza lista en 3 segundos
Sirviendo Pizza al cliente...
Cliente est√° comiendo...
Cuenta pagada 
manipulando el DOM 
*/

/*
 ENTREGA FINAL DEL GRUPO:
Un archivo o varios  .js con el c√≥digo del simulador, organizado en funciones
y con comentarios explicativos de d√≥nde aplicaron:
   - Callback
   - Promesas
   - Async/Await
*/
